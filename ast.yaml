models:
  Atom:
    - Datum: ~Datum
    - Expression: ~Expression
    - Record: ~Record
    - Procedure: ~Procedure
 
  Record:
    - EmptyList: []
    - List

  List: [Atom]

  Datum:
    - Quotation: Datum
    - Quasiquotation: Datum
    - Unquote: Datum
    - UnquoteSplicing: Datum
    - List: [Datum] # -> List(Vec<Datum>)
    - ImproperList: [[Datum], Datum] # -> ImproperList(Vec<Datum>, Datum)
    - Vector: [Datum]
    - ByteVector: [u8]
    - Byte: u8
    - Boolean: bool
    - Number
    - Character: char
    - String: ~str
    - Identifier
    - Label: usize
    - Labelled: [usize, Datum] # -> Labelled(usize, Datum)
    - EmptyList: [] # -> EmptyList

  CommandOrDefinition:
    - Command: ~Expression
    - Definition: ~Definition
    - Begin: [CommandOrDefinition]

  Expression:
    - Identifier
    - Literal: ~Literal
    - ProcedureCall: ~ProcedureCall
    - LambdaExpression: ~LambdaExpression
    - Conditional: ~If
    - Assignment: ~Assignment
    - DerivedExpression: ~DerivedExpression
    - MacroUse: ~MacroUse
    - MacroBlock: ~MacroBlock
    - Includer: ~Includer

  ProcedureCall:
    operator: Expression
    operands: [Expression]

  Identifier: ~str

  Literal:
    - Quotation: ~Datum
    - SelfEvaluating: ~SelfEvaluating

  SelfEvaluating:
    - Vector: [Datum]
    - String: ~str
    - ByteVector: [u8]
    - Character: char
    - Boolean: bool
    - Number

  Number:
    - Integer
    - Rational
    - Float
    - Complex

  Constructor:
    identifier: Identifier
    field_names: [Identifier]
  
  FieldSpec:
    identifier: Identifier
    accesssor: Identifier
    mutator: Identifier?

  Program:
    commands_or_definitions: [CommandOrDefinition]
  
  Pattern:
    - Identifier
    - Underscore: []
    - List: [Pattern]
    - ImproperList: ~PatternImproperList
    - EllipsisList: ~PatternEllipsisList
    - EllipsisImproperList: ~PatternEllipsisImproperList
    - Vector: [Pattern]
    - EllipsisVector: ~PatternEllipsisVector
    - Datum: ~PatternDatum

  PatternImproperList:
    head: [Pattern]
    tail: Pattern
  PatternEllipsisList:
    head: [Pattern]
    tail: [Pattern]
  PatternEllipsisVector:
    head: [Pattern]
    tail: [Pattern]
  PatternEllipsisImproperList:
    head: [Pattern]
    mid: [Pattern]
    tail: Pattern

  Template:
    - Identifier
    - Datum: PatternDatum
    - List: [Template]
    - Vector: [Template]
    - ImproperList: [[Template], Template]

  PatternDatum:
    - String: ~str
    - Character: char
    - Boolean: bool
    - Number
    - ByteVector: [u8]

  SyntaxDefinition:
    keyword: Identifier
    transformer_spec: ~TransformerSpec

  Assignment:
    identifier: Identifier
    expression: Expression

  Body:
    definitions: [Definition]
    sequence: [Expression]
  
  Define:
    identifier: Identifier
    expression: Expression
  
  Definition:
    - Define: ~Define
    - DefineValues: ~DefineValues
    - DefineRecordType: ~DefineRecordType
    - SyntaxDefinition: ~SyntaxDefinition
    - Begin: [Definition]
  
  DefineValues:
    formals: Formals
    body: Body
  
  DefineRecordType:
    identifier: Identifier
    constructor: Constructor
    predicate: Identifier
    field_specs: [FieldSpec]

  DerivedExpression:
    - Cond
    - Case
    - And
    - Or
    - When
    - Unless
    - Let
    - LetStar
    - Letrec
    - LetrecStar
    - LetValues
    - LetStarValues
    - Begin: [Expression]
    - Do
    - DelayForce
    - Delay
    - Parameterize
    - Guard
    - Quasiquotation
    - CaseLambda

  Let:
    name: Identifier?
    bindings: [BindingSpec]
    body: Body
  
  BindingSpec:
    identifier: Identifier
    expression: Expression

  Cond:
    clauses: [CondClause]
    tail: [Expression]
  
  CondClause:
    test: Expression
    tail: Tail

  Case:
    expression: Expression
    clauses: [CaseClause]
    tail: Tail
  
  CaseClause:
    data: [Datum]
    tail: Tail
  
  Tail:
    - Recipient: Expression
    - Sequence: [Expression]

  If:
    test: Expression
    consequent: Expression
    alternate: Expression?
  
  Formals:
    - Identifier
    - List: [Identifier]
    - ImproperList: [[Identifier], Identifier]
  
  LambdaExpression:
    formals: ~Formals
    body: ~Body

  Exactness:
    - Exact: []
    - Inexact: []
    - Unspecified: []
  
  Signedness:
    - Plus: []
    - Minus: []
    - Unsigned: []
  
  Quasiquotation:
    - Datum: ~Datum
    - Unquotation: ~Quasiquotation
    - List: [Quasiquotation]
    - ImproperList: ~QqImproperList
    - Vector: [Quasiquotation]
    - Expression: ~Expression

  QqImproperList:
    head: [Quasiquotation]
    tail: ~Quasiquotation
  
  # Temporary empty impls
  Float: []
  Rational: []
  Complex: []
  Integer: []
  LetValues: []
  MacroUse: []
  Unless: []
  CaseLambda: []
  Guard: []
  Parameterize: []
  Delay: []
  DelayForce: []
  Do: []
  LetStarValues: []
  LetrecStar: []
  Letrec: []
  LetStar: []
  When: []
  Or: []
  And: []
  MacroBlock: []
  Includer: []
  Procedure: []
  TransformerSpec: []
config:
  derive: [Debug, Clone, PartialEq, Eq, PartialOrd, Ord, Hash]
  visibility: pub